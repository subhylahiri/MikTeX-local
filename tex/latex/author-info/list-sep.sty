% -*- TeX -*- -*- STY -*- -*- LaTeX3 -*-
%--------------------------------------------------------------------------------
%     Processing lists, adding punctuation, ...
%
% You'll either need to \DeclareInstance or \UseTemplate, followed by a
% \EditInstance { length = ... }
% Or, inside template code where the instance comes from a kay:
%   \listsep_edit_length:Nn \<template cs> {<new-length>}
%
% Before loop:  \int_zero:N <int-var>
%               \UseInstance ... {<tl-var>} {<int-var>}
% This sets up <int-var> as a countdown timer, and appends any prefix to <tl-var>
% In loop:      \UseInstance ... {<tl-var>} {<int-var>}
% This decrements the counter and appends punctuation to <tl-var>
%
\RequirePackage{expl3}
\ProvidesExplPackage {list-sep} {2019/09/22} {v0.1} {automatic list separators}
%\RequirePackage{interface3}
\RequirePackage{xtemplate}
%================================================================================
% Interface
%================================================================================
\DeclareObjectType { punctuator } {2} % return tl-var, list members seq-var
%================================================================================
\DeclareTemplateInterface { punctuator } { in-sentence } {2}
  {
    prefix          : tokenlist = {} ,
    pair            : tokenlist = {} ,
    antepenultimate : tokenlist = {} ,
    penultimate     : tokenlist = {} ,
    ultimate        : tokenlist = {} ,
    append          : boolean = true ,
    global          : boolean = false ,
  }
\DeclareTemplateInterface { punctuator } { inline-list } {2}
  {
    prefix      : tokenlist = {} ,
    separator   : tokenlist = {} ,
    final       : tokenlist = {} ,
    append      : boolean = true ,
    global      : boolean = false ,
  }
\DeclareTemplateInterface { punctuator } { inline-range } {2}
  {
    prefix      : tokenlist = {} ,
    separator   : tokenlist = {} ,
    final       : tokenlist = {} ,
    append      : boolean = true ,
    global      : boolean = false ,
  }
\DeclareTemplateInterface { punctuator } { map-clist } {2}
  {
    seq-version : instance { punctuator } ,
  }
%================================================================================
\cs_generate_variant:Nn \seq_use:Nn { NV }
\cs_generate_variant:Nn \seq_use:Nnnn { NVVV }
\tl_new:N \l__listsep_scratch_tl
\tl_new:N \l__listsep_insent_prf_tl
\tl_new:N \l__listsep_insent_pr_tl
\tl_new:N \l__listsep_insent_ap_tl
\tl_new:N \l__listsep_insent_pu_tl
\tl_new:N \l__listsep_insent_ul_tl
\bool_new:N \g__listsep_insent_app_bool
\bool_new:N \g__listsep_insent_glb_bool

\DeclareTemplateCode  { punctuator } { in-sentence } {2}
  {
    prefix          = \l__listsep_insent_prf_tl ,
    pair            = \l__listsep_insent_pr_tl ,
    antepenultimate = \l__listsep_insent_ap_tl ,
    penultimate     = \l__listsep_insent_pu_tl ,
    ultimate        = \l__listsep_insent_ul_tl ,
    append          = global \g__listsep_insent_app_bool ,
    global          = global \g__listsep_insent_glb_bool ,
  }
{
  \group_begin:
    \AssignTemplateKeys
    \tl_gclear:N \g_tmpa_tl
    \seq_if_empty:NF #2
      {
        \tl_gset:Nx \g_tmpa_tl
          {                             %
            \l__listsep_insent_prf_tl   %
            \seq_use:NVVV #2            %
              \l__listsep_insent_pr_tl  %
              \l__listsep_insent_ap_tl  %
              \l__listsep_insent_pu_tl  %
              \l__listsep_insent_ul_tl  %
          }
      }
  \group_end:
  \__listsep_bool_if_if_set:NNNN
    \g__listsep_insent_glb_bool \g__listsep_insent_app_bool #1 \g_tmpa_tl
}
%--------------------------------------------------------------------------------
\tl_new:N \l__listsep_agram_prf_tl
\tl_new:N \l__listsep_agram_sep_tl
\tl_new:N \l__listsep_agram_end_tl
\bool_new:N \g__listsep_agram_app_bool
\bool_new:N \g__listsep_agram_glb_bool

\DeclareTemplateCode  { punctuator } { inline-list } {2}
  {
    prefix      = \l__listsep_agram_prf_tl ,
    separator   = \l__listsep_agram_sep_tl ,
    final       = \l__listsep_agram_end_tl ,
    append      = global \g__listsep_agram_app_bool ,
    global      = global \g__listsep_agram_glb_bool ,
  }
{
  \group_begin:
    \AssignTemplateKeys
    \tl_gclear:N \g_tmpa_tl
    \seq_if_empty:NF #2
      {
        \tl_gset:Nx \g_tmpa_tl
          {                                         %
            \l__listsep_agram_prf_tl                %
            \seq_use:NV #2 \l__listsep_agram_sep_tl %
            \l__listsep_agram_end_tl                %
          }
      }
  \group_end:
  \__listsep_bool_if_if_set:NNNN
    \g__listsep_agram_glb_bool \g__listsep_agram_app_bool #1 \g_tmpa_tl
}

%--------------------------------------------------------------------------------
\tl_new:N \l__listsep_range_prf_tl
\tl_new:N \l__listsep_range_sep_tl
\tl_new:N \l__listsep_range_end_tl
\bool_new:N \l__listsep_range_app_bool
\bool_new:N \l__listsep_range_glb_bool

\DeclareTemplateCode  { punctuator } { inline-range } {2}
  {
    prefix      = \l__listsep_range_prf_tl ,
    separator   = \l__listsep_range_sep_tl ,
    final       = \l__listsep_range_end_tl ,
    append      = \l__listsep_range_app_bool ,
    global      = \l__listsep_range_glb_bool ,
  }
{
  \group_begin:
    \AssignTemplateKeys
    \tl_clear:N \l__listsep_scratch_tl
    \seq_if_empty:NF #2
      {
        \tl_set:NV \l__listsep_scratch_tl \l__listsep_range_prf_tl
        \seq_get_left:NN #2 \l_tmpa_tl
        \tl_put_right:NV \l__listsep_scratch_tl \l_tmpa_tl
        \tl_put_right:NV \l__listsep_scratch_tl \l__listsep_range_sep_tl
        \seq_get_right:NN #2 \l_tmpa_tl
        \tl_put_right:NV \l__listsep_scratch_tl \l_tmpa_tl
        \tl_put_right:NV \l__listsep_scratch_tl \l__listsep_range_end_tl
      }
    \tl_gset_eq:NN \g_tmpa_tl \l__listsep_scratch_tl
  \group_end:
  \__listsep_bool_if_if_set:NNNN
    \l__listsep_range_glb_bool \l__listsep_range_app_bool #1 \g_tmpa_tl
}

%--------------------------------------------------------------------------------
\seq_new:N \l__listsep_scratch_seq

\DeclareTemplateCode  { punctuator } { map-clist } {2}
  {
    seq-version = \__listsep_clist_wrapper:nn ,
  }
{
  \seq_set_from_clist:Nn \l__listsep_scratch_seq {#2}
  \__listsep_clist_wrapper:nn {#1} { \l__listsep_scratch_seq }
}
%--------------------------------------------------------------------------------
% #1: bool global
% #2: bool append
% #3: tl-var out
% #4: tl-var in
\cs_new_protected:Nn \__listsep_bool_if_if_set:NNNN
  {
    \bool_if:NTF #1
      {
        \bool_if:NTF #2
          { \tl_gput_right:NV #3 #4 }
          { \tl_gset_eq:NN #3 #4 }
      }
      {
        \bool_if:NTF #2
          { \tl_put_right:NV #3 #4 }
          { \tl_set_eq:NN #3 #4 }
      }
      \tl_gclear:N #4
  }

%================================================================================
\DeclareRestrictedTemplate { punctuator } { in-sentence } { mid-sentence }
  {
    ultimate    = {} ,
  }
\DeclareRestrictedTemplate { punctuator } { inline-list } { mid-list }
  {
    final   = \KeyValue { separator } ,
  }
\DeclareRestrictedTemplate { punctuator } { inline-list } { endless-list }
  {
    final   = {} ,
  }
%--------------------------------------------------------------------------------
\DeclareInstance { punctuator } { oxford-comma } { in-sentence }
  {
    pair            = {~and~} ,
    antepenultimate = {,~} ,
    penultimate     = {,~and~} ,
    ultimate        = {.} ,
  }
\DeclareInstance { punctuator } { cambridge-comma } { in-sentence }
  {
    pair            = {~and~} ,
    antepenultimate = {,~} ,
    penultimate     = {~and~} ,
    ultimate        = {.} ,
  }
%    ...............................................................
\DeclareInstance { punctuator } { oxford-comma-mid } { mid-sentence }
  {
    pair            = {~and~} ,
    antepenultimate = {,~} ,
    penultimate     = {,~and~} ,
  }
\DeclareInstance { punctuator } { cambridge-comma-mid } { mid-sentence }
  {
    pair            = {~and~} ,
    antepenultimate = {,~} ,
    penultimate     = {~and~} ,
  }
%    ...............................................................
\DeclareInstance { punctuator } { all-comma } { inline-list }
  {
    separator = {,~} ,
    final     = {.} ,
  }
\DeclareInstance { punctuator } { semicolon } { inline-list }
  {
    separator = {;~} ,
    final     = {.} ,
  }
%    ...............................................................
\DeclareInstance { punctuator } { all-comma-mid } { mid-list }
  {
    separator = {,~} ,
  }
\DeclareInstance { punctuator } { semicolon-mid } { mid-list }
  {
    separator = {;~} ,
  }
%    ...............................................................
\DeclareInstance { punctuator } { all-comma-noend } { endless-list }
  {
    separator = {,~} ,
  }
\DeclareInstance { punctuator } { semicolon-noend } { endless-list }
  {
    separator = {;~} ,
  }
\DeclareInstance { punctuator } { none } { endless-list }
  {
    separator = {} ,
  }
%--------------------------------------------------------------------------------
\DeclareInstance { punctuator } { en-dash } { inline-range }
  {
    separator = {--} ,
  }
%================================================================================

% Get name of instance from template variable (function)
% #1: function created by template key of type instance{punctuator}
%
\cs_new:Nn \__listsep_instance_name:N
  { \tl_item:Nn #1 {-1} }

% Change a key parameter of instance from template variable (function)
% #1: function created by template key of type instance{punctuator}
% #2: parameter name
% #3: new value for parameter
% Expected use: modify 'global' and/or 'append'
%
\cs_new_protected:Nn \listsep_edit_key:Nnn
{
  \exp_args:Nnx \EditInstance { punctuator } { \__listsep_instance_name:N #1 }
    { #2 = #3 }
}
\cs_generate_variant:Nn \listsep_edit_key:Nnn { Nnx }

%================================================================================
\endinput
