% -*- TeX -*- -*- LaTeX3 -*-
%
% Assembling name parts
%
%================================================================================
\ProvidesExplFile {process-name-assemble.DEF} {2019/09/16} {v1.0}
  {format & combine name parts for process-name.sty (SL)}
%================================================================================
%\RequirePackage{expl3}
%\RequirePackage{xparse}
%\RequirePackage{xtemplate}
%\RequirePackage{l3keys2e}
%\RequirePackage{interface3}
%%================================================================================
%\DeclareObjectType { assembler } {2}
%
%\DeclareTemplateInterface { assembler } { name-parts } {2}
%  {
%    order   : choice { given-family, family-given } = given-family ,
%    given   : choice { full, inits, terseinits, none } = full ,
%    prefix  : choice { full, inits, terseinits, none } = full ,
%    family  : choice { full, inits, terseinits, none } = full ,
%    suffix  : choice { full, inits, terseinits, none } = full ,
%  }
%================================================================================
% Utilities
%--------------------------------------------------------------------------------

% Choose name separator
% #1: separator seq-var {ultimate, penultimate, ante-penultimate} or {ultimate, pair}
% #2: num remaining. int
%
\cs_new:Nn \procname_sep_choose:Nn
  { \exp_args:NNe \seq_item:Nn #1 { \int_min:nn {#2} {3} } }

\cs_generate_variant:Nn \procname_sep_choose:Nn { NV, cn, cV }

% Make separator sequence
% separator seq-var {ultimate, penultimate, ante-penultimate} or {ultimate, pair}
% #1: seq-var for result
% #2: length of list, int
% #3-6: {pair, ante-penultimate, penultimate, ultimate}
%
\cs_new_protected:Nn \procname_sep_seq:Nnnnnn
{
  \seq_put_right:Nn #1 {#6}
  \int_compare:nNnTF {#2} > {2}
    {
      \seq_put_right:Nn #1 {#5}
      \seq_put_right:Nn #1 {#4}
    }
    { \seq_put_right:Nn #1 {#3} }
}
\cs_generate_variant:Nn \procname_sep_seq:Nnnnnn { NVVVVV, cnnnnn, cVVVVV }

% Make simple separator sequence - no special treatment of penultimate
% separator seq-var {ult, sep, sep}
% #1: seq-var for result
% #2: separator
% #3: closer
%
\cs_new_protected:Nn \procname_simple_sep_seq:Nnn
{
  \seq_put_right:Nn #1 {#3}
  \seq_put_right:Nn #1 {#2}
  \seq_put_right:Nn #1 {#2}
}
\cs_generate_variant:Nn \procname_sep_seq:Nnn { NVV, cnn, cVV }
% Make simple separator sequence - no special treatment of penultimate / ultimate
% separator seq-var {{}, sep, sep}
% #1: seq-var for result
% #2: separator
%
\cs_new_protected:Nn \procname_simple_sep_seq:Nn
{
  \seq_put_right:Nn #1 {}
  \seq_put_right:Nn #1 {#2}
  \seq_put_right:Nn #1 {#2}
}
\cs_generate_variant:Nn \procname_sep_seq:Nn { NV, cn, cV }
%--------------------------------------------------------------------------------
% Spacing name parts

% Does the name part style have spaces?
\prg_new_conditional:Nnn \__procname_namept_style_spc_intra:n { TF }
  {
    \bool_lazy_or:nnTF
        { \str_if_eq_p:nn {#1} { full } }
        { \str_if_eq_p:nn {#1} { inits } }
      { \prg_return_true: }
      { \prg_return_false: }
  }
\prg_generate_conditional_variant:Nnn \__procname_namept_style_spc_intra:n { v } { TF }

% Does the name part have spaces?
\prg_new_conditional:Nnn \__procname_namept_spc_intra:n { p }
  {
    \__procname_namept_style_spc_intra:vTF {l__procname_namepts_#1_tl}
      { \prg_return_true: }
      { \prg_return_false: }
  }

% Should there be an added space between the name parts
\prg_new_conditional:Nnn \__procname_namepts_spc_inter:nn { T }
  {
    \bool_lazy_and:nnTF
        { \__procname_namept_spc_intra_p:n {#1} }
        { ! \__procname_namept_spc_intra_p:n {#1} }
      { \prg_return_true: }
      { \prg_return_false: }
  }

\cs_new_protected:Nn \procname_add_inter_space:Nnn
  {
    \__procname_namepts_spc_inter:nnT {#2} {#3}
      { \tl_gput_right:Nn #1 { ~ } }
  }

%--------------------------------------------------------------------------------
% Initials etc.

% Process one word of one name part
% #1: one word of name part
%
\cs_new:Nn \procname_namept_full:n
  { ~#1 }

\cs_new:Nn \procname_namept_inits:n
  { ~\tl_head:n {#1}. }

\cs_new:Nn \procname_namept_terseinits:n
  { \tl_head:n {#1} }

\cs_new:Nn \procname_namept_none:n
  {}

%--------------------------------------------------------------------------------

% Process one name part
% #1: global tl-var to append to
% #2: prop-list for name
% #3: key for name part
%
\cs_new_protected:Nn \procname_namept_run:NNn
{
  \group_begin:
    \tl_clear:N \l_tmpa_tl
    \prop_get:NnNT #2 {#3} \l_tmpa_tl
    \exp_args:NNV \seq_set_split:NnV \l_tmpa_seq \c_space_tl \l_tmpa_tl
    \seq_if_empty:NF \l_tmpa_seq
      {
        \tl_clear:N \l_tmpa_tl
        \tl_set_eq:Nc \l_tmpb_tl { l__procname_namepts_#3_tl }
        \tl_put_left:Nn \l_tmpb_tl { procname_namept_ }
        \tl_put_right:Nn \l_tmpb_tl { :n }
        \seq_map_inline:Nn \l_tmpa_seq
          { \tl_put_right:Nx \l_tmpa_tl { \use:c { \l_tmpb_tl } {##1} } }
      }
    \tl_gset_eq:NN \g_tmpa_tl \l_tmpa_tl
  \group_end:
  \tl_put_right:NV #1 \g_tmpa_tl
  \tl_gclear:N \g_tmpa_tl
}

%================================================================================
%--------------------------------------------------------------------------------

\tl_new:N \l__procname_name_tl
\tl_new:N \l__procname_namepts_given_tl
\tl_new:N \l__procname_namepts_prefix_tl
\tl_new:N \l__procname_namepts_family_tl
\tl_new:N \l__procname_namepts_suffix_tl
\bool_new:N \l__procname_namepts_order_bool

\DeclareTemplateCode { assembler } { name-parts } {2}
  {
    order   = {
        given-family = \bool_set_false:N \l__procname_namepts_order_bool ,
        family-given = \bool_set_true:N \l__procname_namepts_order_bool ,
    } ,
    given   = {
        full        = \tl_set:Nn \l__procname_namepts_given_tl {full} ,
        inits       = \tl_set:Nn \l__procname_namepts_given_tl {inits} ,
        terseinits  = \tl_set:Nn \l__procname_namepts_given_tl {terseinits} ,
        none        = \tl_set:Nn \l__procname_namepts_given_tl {none} ,
    } ,
    prefix  = {
        full        = \tl_set:Nn \l__procname_namepts_prefix_tl {full} ,
        inits       = \tl_set:Nn \l__procname_namepts_prefix_tl {inits} ,
        terseinits  = \tl_set:Nn \l__procname_namepts_prefix_tl {terseinits} ,
        none        = \tl_set:Nn \l__procname_namepts_prefix_tl {none} ,
    } ,
    family  = {
        full        = \tl_set:Nn \l__procname_namepts_family_tl {full} ,
        inits       = \tl_set:Nn \l__procname_namepts_family_tl {inits} ,
        terseinits  = \tl_set:Nn \l__procname_namepts_family_tl {terseinits} ,
        none        = \tl_set:Nn \l__procname_namepts_family_tl {none} ,
    } ,
    suffix  = {
        full        = \tl_set:Nn \l__procname_namepts_suffix_tl {full} ,
        inits       = \tl_set:Nn \l__procname_namepts_suffix_tl {inits} ,
        terseinits  = \tl_set:Nn \l__procname_namepts_suffix_tl {terseinits} ,
        none        = \tl_set:Nn \l__procname_namepts_suffix_tl {none} ,
    }
  }
{
  \group_begin:
    \AssignTemplateKeys
    \tl_clear:N \l__procname_name_tl
    \bool_if:NTF \l__procname_namepts_order_bool
      {
        \procname_namept_run:NNn \l__procname_name_tl #2 {prefix}
          \procname_add_inter_space:Nnn \l__procname_name_tl {prefix} {family}
        \procname_namept_run:NNn \l__procname_name_tl #2 {family}
          \procname_add_inter_space:Nnn \l__procname_name_tl {family} {suffix}
        \procname_namept_run:NNn \l__procname_name_tl #2 {suffix}
          \tl_trim_spaces:N \l__procname_name_tl
          \tl_put_right:Nn \l__procname_name_tl {,~}
        \procname_namept_run:NNn \l__procname_name_tl #2 {given}
      }
      {
        \procname_namept_run:NNn \l__procname_name_tl #2 {given}
          \procname_add_inter_space:Nnn \l__procname_name_tl {given} {prefix}
        \procname_namept_run:NNn \l__procname_name_tl #2 {prefix}
          \procname_add_inter_space:Nnn \l__procname_name_tl {prefix} {family}
        \procname_namept_run:NNn \l__procname_name_tl #2 {family}
          \procname_add_inter_space:Nnn \l__procname_name_tl {family} {suffix}
        \procname_namept_run:NNn \l__procname_name_tl #2 {suffix}
      }
    \tl_trim_spaces:N \l__procname_name_tl
    \tl_gset_eq:NN \g_tmpb_tl \l__procname_name_tl
  \group_end:
  \tl_put_right:NV #1 \g_tmpb_tl
  \tl_gclear:N \g_tmpb_tl
}
%================================================================================

%================================================================================
\endinput
