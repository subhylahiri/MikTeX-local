% -*- TeX -*- -*- LaTeX3 -*-
%
% Sorting name lists
%
%================================================================================
\ProvidesExplFile {process-name-sort.def} {2019/09/16} {v1.0}
  {sorting names for process-name.sty}
%================================================================================
%\RequirePackage{interface3}
%\RequirePackage{expl3}
%\RequirePackage{xtemplate}
%================================================================================
%\DeclareObjectType { sorter } {2} % two prop-lists to compare, created in process-name-split
%
%\DeclareTemplateInterface { sorter } { by-name } {2}
%  {
%    sort1   : choice { family, given, prefix, suffix, none } = none ,
%    sort2   : choice { family, given, prefix, suffix, none } = none ,
%    sort3   : choice { family, given, prefix, suffix, none } = none ,
%    sort4   : choice { family, given, prefix, suffix, none } = none ,
%  }
%================================================================================
% Sorting comparisons

% Standardise string - lower case, no spaces
% #1: str variable to store result
% #2: token list to standardise
%
\cs_new_protected:Nn \__procname_std_str:Nn
{
  \str_set:Nx #1 { \str_fold_case:n {#2} }
  \str_remove_all:Nn #1 { }
  \str_remove_all:Nn #1 {,}
}

% Compare ints
% +1 if #1 is smaller
% -1 if #2 is smaller
%  0 if #1 == #2
%
\cs_new:Nn \__procname_compare_int:nn
  { \int_eval:n { (#2 - #1) / \int_abs:n {#2 - #1} } }

% Compare single tokens, ascii order
% +1 if #1 is earlier
% -1 if #2 is earlier
%  0 if #1 == #2 - assume already excluded by an equality test
%
\cs_new:Nn \__procname_compare_tok:nn
  { \__procname_compare_int:nn  { `#1 } { `#2 } }

\cs_generate_variant:Nn \__procname_compare_tok:nn { xx }
\cs_generate_variant:Nn \__procname_compare_int:nn { xx }

% Compare token lists, case insensitive, dictionary order
% #1: int variable to store result
% +1 if #2 is earlier
% -1 if #3 is earlier
%  0 if #2 == #3
%
\cs_new_protected:Nn \__procname_compare_tl:Nnn
{
  \int_set:Nn #1 {0}
  \str_if_eq:nnF {#2} {#3}
    {
      \__procname_std_str:Nn \l_tmpa_str {#2}
      \__procname_std_str:Nn \l_tmpb_str {#3}
      \int_set:Nn \l_tmpa_int
        { \int_min:nn {\str_count:N \l_tmpa_str} {\str_count:N \l_tmpb_str} }
      \int_set_eq:NN \l_tmpb_int \c_one_int
%
      \int_do_until:nNnn { \l_tmpb_int } > { \l_tmpa_int }
        {
          \int_set:Nn #1
            {
              \__procname_compare_tok:xx
                { \str_item:Nn \l_tmpa_str \l_tmpb_int }
                { \str_item:Nn \l_tmpb_str \l_tmpb_int }
            }
          \int_compare:nNnF {#1} = {0}
            { \int_set_eq:NN \l_tmpb_int \l_tmpa_int }
          \int_incr:N \l_tmpb_int
        }
%
        \int_compare:nNnT {#1} = {0}
          {
            \int_set:Nn #1
              {
                \__procname_compare_int:xx
                  { \str_count:N \l_tmpa_str }
                  { \str_count:N \l_tmpb_str }
              }
          }
    }
}

\cs_generate_variant:Nn \__procname_compare_tl:Nnn { Nxx }

%================================================================================

\seq_new:N \l__sort_by_name_seq

\DeclareTemplateCode { sorter } { by-name } {2}
  {
    sort1   = {
        family = \seq_put_right:Nn \l__sort_by_name_seq { family } ,
        given  = \seq_put_right:Nn \l__sort_by_name_seq { given } ,
        prefix = \seq_put_right:Nn \l__sort_by_name_seq { prefix } ,
        suffix = \seq_put_right:Nn \l__sort_by_name_seq { suffix } ,
        none   = \seq_put_right:Nn \l__sort_by_name_seq { none } ,
    } ,
    sort2   = {
        family = \seq_put_right:Nn \l__sort_by_name_seq { family } ,
        given  = \seq_put_right:Nn \l__sort_by_name_seq { given } ,
        prefix = \seq_put_right:Nn \l__sort_by_name_seq { prefix } ,
        suffix = \seq_put_right:Nn \l__sort_by_name_seq { suffix } ,
        none   = \seq_put_right:Nn \l__sort_by_name_seq { none } ,
    } ,
    sort3   = {
        family = \seq_put_right:Nn \l__sort_by_name_seq { family } ,
        given  = \seq_put_right:Nn \l__sort_by_name_seq { given } ,
        prefix = \seq_put_right:Nn \l__sort_by_name_seq { prefix } ,
        suffix = \seq_put_right:Nn \l__sort_by_name_seq { suffix } ,
        none   = \seq_put_right:Nn \l__sort_by_name_seq { none } ,
    } ,
    sort4   = {
        family = \seq_put_right:Nn \l__sort_by_name_seq { family } ,
        given  = \seq_put_right:Nn \l__sort_by_name_seq { given } ,
        prefix = \seq_put_right:Nn \l__sort_by_name_seq { prefix } ,
        suffix = \seq_put_right:Nn \l__sort_by_name_seq { suffix } ,
        none   = \seq_put_right:Nn \l__sort_by_name_seq { none } ,
    } ,
  }
{
  \AssignTemplateKeys
  \seq_put_right:Nn \l__sort_by_name_seq { none }
  \seq_map_inline:Nn \l__sort_by_name_seq
    {
      \tl_if_eq:nnT {##1} { none } { \seq_map_break:n { \sort_return_same: } }
      \__procname_compare_tl:Nnn \l_tmpa_int
        { \prop_get:Nn #1 {##1} }
        { \prop_get:Nn #2 {##1} }
      \int_case:nn { \l_tmpa_int }
        {
          {1} { \seq_map_break:n { \sort_return_same: } }
          {-1} { \seq_map_break:n { \sort_return_swapped: } }
        }
    }
}
%================================================================================

% Sort a sequence of names
% #1: sequence of munged names
% #2: sorter instance
\cs_new_protected:Nn \procname_sort_seq:NN
{
  \seq_sort:Nn #1 { #2 {##1} {##2} }
}

%================================================================================
\endinput
