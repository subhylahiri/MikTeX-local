% -*- TeX -*- -*- STY -*- -*- LaTeX3 -*-
%
% Processing inputs -> our form
%
%================================================================================
\RequirePackage{expl3}
\ProvidesExplPackage {sl-author-info-munge} {2017/12/28} {v1.0}
    {titling macros for affiliations etc. (SL)}
%================================================================================
%\RequirePackage{interface3}
\RequirePackage{xparse}
\RequirePackage{xtemplate}
\RequirePackage{process-name}
%================================================================================
\makeatletter
%================================================================================
\tl_new:N \g__slauth_current_tl
\tl_new:N \g__slauth_contact_label_tl
\prop_new:N \g__slauth_affil_def_prop
\prop_new:N \g__slauth_email_def_prop
\prop_new:N \g__slauth_thanks_def_prop
%================================================================================
% Error messages
%================================================================================
%\cs_if_exist:NTF \g__slauth_auth_hook_tl - but its empty for now
\@ifpackageloaded{sl-author-info}{}{
\msg_new:nnnn { slauth } { loaded-early }
  { This~package~should~be~loaded~via~'sl-author-info' }
  {
    This~package~should~not~be~loaded~directly.~Load~'sl-author-info'~instead.
    \\ 'sl-author-info'~will~load~this~sub-package~for~you.
  }
\msg_error:nn { slauth } { loaded-early }
}
%--------------------------------------------------------------------------------
% Error messages for this package
\msg_new:nnnn { slauth } { unknown-prop }
  { Unknown~author~key:~'#1' }
  {
    You~have~used~an~invalid~key~:'#1'~for~\g__slauth_current_tl.
    \\ LaTeX~will~ignore~this~key~entirely.
  }
\msg_new:nnnn { slauth } { unknown-cont }
  { Unknown~#2~label:~'#1' }
  {
    You~have~used~an~invalid~label~:'#1'~for~author~'\g__slauth_current_tl'.
    \\ LaTeX~will~ignore~this~#2~for~this~author.
  }
%================================================================================

% Append a sequence to an item in prop-list, creates item if not present, global
% #1: prop-list variable
% #2: name of property, token list
% #3: info to append, seq variable
%
\cs_new_protected:Nn \__slauth_prop_gappend:NnN
{
  \group_begin:
    \prop_gpop:NnNTF #1 {#2} \l_tmpb_seq
      { \seq_concat:NNN \l_tmpa_seq \l_tmpb_seq #3 }
      { \seq_set_eq:NN \l_tmpa_seq #3 }
    \prop_gput:NnV #1 {#2} \l_tmpa_seq
  \group_end:
}

% Append a token list to a sequence item in prop-list, creates item if not present, global
% #1: prop-list variable
% #2: name of property, token list
% #3: info to append, seq variable
%
\cs_new_protected:Nn \__slauth_prop_gappend_one:Nnn
{
  \group_begin:
    \seq_clear:N \l_tmpa_seq
    \seq_put_right:Nn \l_tmpa_seq {#3}
    \__slauth_prop_gappend:NnN #1 {#2} \l_tmpa_seq
  \group_end:
}
\cs_generate_variant:Nn \__slauth_prop_gappend_one:Nnn {      NnV, NVn, NVV }
\cs_generate_variant:Nn \__slauth_prop_gappend_one:Nnn { cnn, cnV, cVn, cVV }

%================================================================================
% Creating data for contact instances

% Keys for an affiliation/email/thanks
%
\keys_define:nn { slauth / contact-new }
{
  label .tl_gset:N = \g__slauth_contact_label_tl ,
  unknown .code:n =
    {
      \tl_if_empty:NTF \l_keys_value_tl
        { \tl_set:NV \g__slauth_contact_label_tl \l_keys_key_tl }
        { \msg_warning:nnx { slauth } { unknown-prop } { \l_keys_key_tl } }
    } ,
}
%--------------------------------------------------------------------------------

% Add a new contact
% #1: prop-list of defined contacts of type #2
% #2: type of contact, token list
% #3: contents of contact, token-list
% #4: key-value clist
%
\cs_new_protected:Nn \__slauth_contact_new:Nnnn
{
  \group_begin:
    \tl_gset:Nx \g__slauth_current_tl { #2~'#3' }
    \tl_gclear:N \g__slauth_contact_label_tl
    \keys_set:nn { slauth / contact-new } {#4}
    \tl_if_blank:VTF \g__slauth_contact_label_tl
      { \__slauth_prop_gappend_one:Nnn #1 { __nolabel }  {#3} }
      { \prop_gput:NVn #1 \g__slauth_contact_label_tl {#3} }
  \group_end:
}
%--------------------------------------------------------------------------------

\cs_new_protected:Nn \__slauth_affil_new:nn
  { \__slauth_contact_new:Nnnn \g__slauth_affil_def_prop { affiliation } {#1} {#2} }

\cs_new_protected:Nn \__slauth_email_new:nn
  { \__slauth_contact_new:Nnnn \g__slauth_email_def_prop { email } {#1} {#2} }

\cs_new_protected:Nn \__slauth_thanks_new:nn
  { \__slauth_contact_new:Nnnn \g__slauth_thanks_def_prop { thanks } {#1} {#2} }

%================================================================================
% Creating data for authors

% Keep track of entities that have been defined/used

% Note use of a new contact, global
% #1: label of contact, token-list
% #2: type of contact, token-list
% #3: prop-list of definitions
% #4: prop-list of used
%
\cs_new_protected:Nn \__slauth_au_gadd_cont:nnNN
{
  \group_begin:
    \prop_if_in:NnTF #3 {#1}
      {
        \prop_get:NnN #3 {#1} \l_tmpb_tl
        \exp_args:NNnV \prop_gput_if_new:Nnn #4 {#1} \l_tmpb_tl
      }
      {
        \tl_if_eq:nnTF {#2} { email }
          { \prop_gput_if_new:Nnn #4 {#1} {#1} }
          { \msg_warning:nnnn { slauth } { unknown-cont } {#1} {#2} }
      }
  \group_end:
}

% Note use of a new affiliation, global
% #1: label of affil
%
\cs_new_protected:Nn \__slauth_au_gadd_affil:n
{
  \__slauth_au_gadd_cont:nnNN {#1} { affiliation }
    \g__slauth_affil_def_prop \g__slauth_affil_used_prop
}
\cs_generate_variant:Nn \__slauth_au_gadd_affil:n { V }

% Note use of a new email, global
% #1: label/content of email
%
\cs_new_protected:Nn \__slauth_au_gadd_email:n
{
  \__slauth_au_gadd_cont:nnNN {#1} { email }
    \g__slauth_email_def_prop \g__slauth_email_used_prop
}

% Note use of a new thanks, global
% #1: label of thanks
%
\cs_new_protected:Nn \__slauth_au_gadd_thanks:n
{
  \__slauth_au_gadd_cont:nnNN {#1} { thanks }
    \g__slauth_thanks_def_prop \g__slauth_thanks_used_prop
}
%--------------------------------------------------------------------------------

\prop_new:N \g__slauth_au_prop

% Keys for a single author
%
\keys_define:nn { slauth / author-new }
{
  affil .code:n =
    {
      \seq_set_from_clist:Nn \l_tmpa_seq {#1}
      \__slauth_prop_gappend:NnN \g__slauth_au_prop { affil } \l_tmpa_seq
      \seq_map_inline:Nn \l_tmpa_seq
        { \__slauth_au_gadd_affil:n {##1} }
    } ,
  email .code:n =
    {
      \seq_set_from_clist:Nn \l_tmpa_seq {#1}
      \__slauth_prop_gappend:NnN \g__slauth_au_prop { email } \l_tmpa_seq
      \seq_map_inline:Nn \l_tmpa_seq
        { \__slauth_au_gadd_email:n {##1} }
    } ,
  thanks .code:n =
    {
      \seq_set_from_clist:Nn \l_tmpa_seq {#1}
      \__slauth_prop_gappend:NnN \g__slauth_au_prop { thanks } \l_tmpa_seq
      \seq_map_inline:Nn \l_tmpa_seq
        { \__slauth_au_gadd_thanks:n {##1} }
    } ,
  unknown .code:n =
    {
      \tl_if_empty:NTF \l_keys_value_tl
        {
          \seq_clear:N \l_tmpa_seq
          \seq_put_right:NV \l_tmpa_seq \l_keys_key_tl
          \__slauth_prop_gappend:NnN \g__slauth_au_prop { affil } \l_tmpa_seq
          \__slauth_au_gadd_affil:V \l_keys_key_tl
        }
        { \msg_warning:nnx { slauth } { unknown-prop } { \l_keys_key_tl } }
    } ,
}
%--------------------------------------------------------------------------------

% Add an author with properties
% #1: author name, token list
% #2: extra info, keyvals
%
\cs_new_protected:Nn \__slauth_author_new:nn
{
  \group_begin:
    \tl_gset:Nn \g__slauth_current_tl { author~'#1' }
    \prop_gclear:N \g__slauth_au_prop
    \procname_get_parts:Nn \g__slauth_au_prop {#1}
    \keys_set:nn { slauth / author-new } {#2}
    % using prop-list as token-list variable?
    \seq_gput_right:NV \g__slauth_author_seq \g__slauth_au_prop
  \group_end:
}
%================================================================================

\cs_new_protected:Nn \__slauth_munge_authors:N
{
  % Munge authors from holding area -> \g__slauth_author_seq, \g__..._used_list_seq
  \seq_map_inline:Nn #1
    { \__slauth_author_new:nn ##1 }
  % Delete unneeded data
  \seq_gclear:N #1
  \prop_gclear:N \g__slauth_affil_def_prop
  \prop_gclear:N \g__slauth_email_def_prop
  \prop_gclear:N \g__slauth_thanks_def_prop
}
%================================================================================
\endinput
%%
%% End of file
