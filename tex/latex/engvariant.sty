%%  Defining UK/US english alternatives for macros.
%%
%% Requires packages: expl3, xparse, babel/polyglossia, iflang
%%
%% This package gets the language name from babel/polyglossia
%%
%% Defines 1 document command: \Fall
%% Defines 4 preamble commands: \newengvariant, \renewengvariant,
%%                              \provideengvariant, \declareengvariant
%% Defines 2 switching commands: \ifUK, \ifUS
%% Defines 1 package command: \engvar_variant:nn
%%
%% \Fall
%%      Expands to `Autumn' / `Fall' if babel is in UK / US mode.
%%
%% \newengvariant{<macro>}{UK=<UK version>, US=<US version>}
%%   Define a macro which expands to either version.
%%   The document command above was created by:
%%
%%     \newengvariant{\Fall}{UK=Autumn, US=Fall}
%%
%% \ifUK{<UK version>}, \ifUS{<US version>}
%%   Expands to version if the language was chosen, otherwwise does nothing.
%%   The definition of \Fall above is equivalent to:
%%
%%      \newcommand{\Fall}{\ifUK{Autumn}\ifUS{Fall}}
%%
%% \engvar_variant:nn{label}{langid={langname, ...}, ...}
%%   Create a set of preamble commands as described above. The label is used
%%   in the command names \new<label>variant etc. The second argument is a
%%   key-value list with comma separated list values, each one of the form
%%   id={name1, name2, ...}. The id is used in the switching command \if<id> and
%%   as the keys for \new<label>variant etc. The names are those used in babel.
%%   The preamble commands above were created with
%%
%%     \engvar_variant:nn{eng}{UK={british, UKenglish}, US={american, USenglish}}
%%
%================================================================================
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{engvariant}[2019/08/19 v1.1 Defining UK/US english alternatives (SL)]
%--------------------------------------------------------------------------------
\RequirePackage{expl3}
%\RequirePackage{interface3}
\RequirePackage{l3keys2e}
\RequirePackage{xparse}
%\RequirePackage{babel}
%\RequirePackage{polyglossia}
\RequirePackage{iflang}
%================================================================================
\ExplSyntaxOn
%================================================================================
% Variables

% prop list: {lang id} { seq on names }
\prop_new:N \g_engvar_languages_prop

% Has the language been chosen internally?
\bool_new:N \l__engvar_lang_bool

% Do we define the languages etc?
\bool_new:N \g__engvar_def_bool

%================================================================================
% Package options

\bool_gset_true:N \g__engvar_def_bool

\keys_define:nn { engvar }
  {
    % Do we define set the language etc?
    english .bool_gset:N = \g__engvar_def_bool,
    english .default:n = true,
    base .bool_gset_inverse:N = \g__engvar_def_bool,
    base .default:n = true,
  }

\ProcessKeysPackageOptions { engvar }
%================================================================================
% Error messages

% Error message for \new<label>variant
\msg_new:nnnn { engvar } { command-already-defined }
  { Command~'\tl_trim_spaces:o{\token_to_str:N #1}'~already~defined! }
  {
    You~have~used~'\token_to_str:N \new#2variant'~
    with~a~command~that~already~has~a~definition.
    \\ LaTeX~will~not~alter~the~existing~definition.
  }
% Error message for \renew<label>variant
\msg_new:nnnn { engvar } { command-not-yet-defined }
  { Command~'\tl_trim_spaces:o{\token_to_str:N #1}'~not~yet~defined! }
  {
    You~have~used~'\token_to_str:N \renew#2variant'~
    with~a~command~that~was~never~defined.
    \\ LaTeX~will~ignore~this~entire~definition.
  }
% Error message for incorrect key
\msg_new:nnnn { engvar } { unknown-lang-id }
  { Unknown~language~identifier~'#1'! }
  {
    When~defining~'#2'~you~have~used~the~identifier~'#1'
    \\ which~was~not~in~the~list~of~language~definitions.
    \\ LaTeX~will~ignore~this~entire~definition.
  }
%================================================================================
% Creating Interface For Defining Variants:

\tl_new:N \l__engvar_validate_tl
% Validate language ids
%
\keys_define:nn { engvar / validate }
  {
    __engvar_validate .code:n =
      { \tl_set:Nx \l__engvar_validate_tl { \token_to_str:N #1 } },
%
    unknown .code:n =
      {
        \prop_if_in:NVF \g_engvar_languages_prop \l_keys_key_tl
          { \msg_error:nnxx { engvar } { unknown-lang-id }
            { \l_keys_key_tl } { \l__engvar_validate_tl }
          }
      }
  }

% Create \new<label>variant function & friends
% #1: label
\cs_new_protected:Nn \__engvar_variant_creator:n
  {
%   ------------------------------------------------------------
    \keys_define:nn { engvar / #1 }
      {
        unknown .code:n =
          { \use:c {if\l_keys_key_tl} { \tl_use:N \l_keys_value_tl } }
      }
%   ------------------------------------------------------------
    \exp_args:Nc \NewDocumentCommand {declare#1variant} { m m }
      {
        \keys_set:nn { engvar / validate } { __engvar_validate=##1, ##2 }
        \DeclareDocumentCommand ##1 { }
          { \keys_set:nn { engvar / #1 } {##2} }
      }
%   ------------------------------------------------------------
    \exp_args:Nc \NewDocumentCommand {new#1variant} { m m }
      {
        \cs_if_exist:NTF ##1
          { \msg_error:nnnn { engvar } { command-already-defined } {##1} {#1} }
          { \use:c {declare#1variant} {##1} {##2} }
      }
%   ------------------------------------------------------------
    \exp_args:Nc \NewDocumentCommand {renew#1variant} { m m }
      {
        \cs_if_exist:NTF ##1
          { \use:c {declare#1variant} {##1} {##2} }
          { \msg_error:nnnn { engvar } { command-not-yet-defined } {##1} {#1} }
      }
%   ------------------------------------------------------------
    \exp_args:Nc \NewDocumentCommand {provide#1variant} { m m }
      { \cs_if_exist:NF ##1 { \use:c {declare#1variant} {##1} {##2} } }
  }

%================================================================================
% Testing languages

% run through list of names for a language, checking for match
% #1: language id, token list
\prg_new_protected_conditional:Nnn \__engvar_if_lang_id:n { T }
  {
    \prop_get:NnN \g_engvar_languages_prop {#1} \l_tmpa_seq
    \bool_set_false:N \l__engvar_lang_bool
    \seq_map_inline:Nn \l_tmpa_seq
      {
         \IfLanguageName {##1}
           { \seq_map_break:n { \bool_set_true:N \l__engvar_lang_bool } }
      }
    \bool_if:NTF \l__engvar_lang_bool
      { \prg_return_true: }
      { \prg_return_false: }
  }
%================================================================================
% Setup language family

% process id & list of names of a language
% #1: language id, token list
% #2: language names, clist
%
\cs_new_protected:Nn \__engvar_run_lang_id_clist:nn
  {
    \seq_set_from_clist:Nn \l_tmpa_seq {#2}
    \prop_gput:NnV \g_engvar_languages_prop {#1} \l_tmpa_seq
%
    \exp_args:Nc \NewDocumentCommand {if#1} { m }
      { \__engvar_if_lang_id:nT {#1} {##1} }
  }
% process id & list of names of a language
% #1: language id, token list variable
% #2: language names, clist variable
%
\cs_generate_variant:Nn \__engvar_run_lang_id_clist:nn { VV }

%--------------------------------------------------------------------------------

% create keys for \engvar_variant function
%
\keys_define:nn { engvar / deflangs }
  {
    unknown .code:n =
      { \__engvar_run_lang_id_clist:VV \l_keys_key_tl \l_keys_value_tl }
  }

% choose language, create \new???variant function
% #1: label
% #2: clist of language specs: id={clist of names},...
\cs_new_protected:Nn \engvar_variant:nn
  {
    \keys_set:nn { engvar / deflangs } {#2}
    \__engvar_variant_creator:n {#1}
  }
%================================================================================

\bool_if:NT \g__engvar_def_bool
  {
    % default language choices
    \engvar_variant:nn {eng} { UK={british, UKenglish}, US={american, USenglish} }
    %----------------------------------------------------------------------------
    \newengvariant{\Fall}{UK=Autumn, US=Fall}
  }
%================================================================================
\ExplSyntaxOff
%================================================================================
\endinput
