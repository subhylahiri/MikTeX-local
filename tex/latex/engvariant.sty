%%  Defining UK/US english alternatives for macros.
%%
%% Requires packages: expl3, xparse, babel/polyglossia, iflang
%%
%% This package gets the language name from babel/polyglossia
%%
%% Defines 1 document command: \Fall
%% Defines 3 preamble commands: \newengvariant, \renewengvariant, \provideengvariant
%% DEfines 2 switching commands: \ifUK, \ifUS
%% Defines 1 package command: \engvar_variant:nn
%%
%% \Fall
%%      Expands to `Autumn' / `Fall' if \engvarUK / \engvarUS was called.
%%
%% \newengvariant{<macro>}{UK=<UK version>, US=<US version>}
%%   Define a macro which expands to either version.
%%   The document command above was created by:
%%     \newengvariant{\Fall}{UK=Autumn, US=Fall}
%%
%% \ifUK{<UK version>}, \ifUS{<US version>}
%%   Expands to version if the language was chosen, otherwwise does nothing.
%%
%% \engvar_variant:nn{label}{langid={langname, ...}, ...}
%%   Create a set of preamble commands as described above. The label is used
%%   in the command names \new<label>variant etc. The second argument is a
%%   key-value list with comma separated list values, each one of the form
%%   id={name1, name2, ...}. The id is used in the switching command \if<id> and
%%   as the keys for \new<label>variant etc. The names are those used in babel.
%%   The preamble commands above were created with
%%     \engvar_variant:nn{eng}{UK={british, UKenglish}, US={american, USenglish}}
%================================================================================
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{engvariant}[2019/08/19 v1.1 Defining UK/US english alternatives (SL)]
%--------------------------------------------------------------------------------
\RequirePackage{expl3}
%\RequirePackage{interface3}
\RequirePackage{l3keys2e}
\RequirePackage{xparse}
%\RequirePackage{babel}
%\RequirePackage{polyglossia}
\RequirePackage{iflang}
%================================================================================
\ExplSyntaxOn
%================================================================================
% Variables

% Has the language been chosen internally?
\bool_new:N \g__engvar_lang_bool

% Do we define set the language etc?
\bool_new:N \g__engvar_def_bool

%--------------------------------------------------------------------------------
% Error message for \new<label>variant
\msg_new:nnnn { engvar } { command-already-defined }
  { Command~'#1'~already~defined! }
  {
    You~have~used~#2~with~a~command~that~already~has~a~definition.
     \\ \\ The~existing~definition~of~'#1'~will~not~be~altered.
  }
% Error message for \renew<label>variant
\msg_new:nnnn { engvar } { command-not-yet-defined }
  { Command ~'#1'~not~yet~defined! }
  {
    You~have~used~#2~with~a~command~that~was~never~defined.
    \\ \\ LaTeX~will~ignore~this~entire~definition.
  }
% Error message for \renew<label>variant
\msg_new:nnnn { engvar } { unknown-lang-id }
  { Unknown~language~identifier~'#1'! }
  {
    You~have~used~the~identifier~#1~
    which~was~not~in~the~list~of~languages~definitions.
    \\ \\ LaTeX~will~ignore~this~entire~definition.
  }
%================================================================================
% Package options

\bool_gset_true:N \g__engvar_def_bool

\keys_define:nn { engvar }
  {
    % Do we define set the language etc?
    english .bool_gset:N = \g__engvar_def_bool,
    english .default:n = true,
    base .bool_gset_inverse:N = \g__engvar_def_bool,
    base .default:n = true,
  }

\ProcessKeysPackageOptions { engvar }
%================================================================================
% Creating Interface For Defining Variants:

% create keys for \new<label>variant function & friends
% #1: macro being defined
% #2: label
\cs_new:Nn \__engvar_variant_creator_aux:Nn
  {
    \keys_define:nn { engvar / #2 }
      {
        unknown .code:n =
          {
            \cs_if_exist:cTF {if\l_keys_key_tl}
              {
                \use:c {if\l_keys_key_tl}
                  { \tl_gset_eq:NN #1 \l_keys_value_tl }
              }
              {
                \msg_error:nnxx { engvar } { unknown-lang-id }
                  { \use:nnn \token_to_str:N \l_keys_key_tl { } }
              }
          }
      }
  }

% create \new<label>variant function & friends
% #1: label
\cs_new:Nn \__engvar_variant_creator:n
  {
    \exp_args:Nc \NewDocumentCommand {declare#1variant} { m m }
      {
        \__engvar_variant_creator_aux:Nn ##1 {#1}
        \keys_set:nn { engvar / #1 } {##2}
      }

    \exp_args:Nc \NewDocumentCommand {new#1variant} { m m }
      {
        \tl_if_exist:NTF ##1
          {
            \msg_error:nnxx { engvar } { command-already-defined }
              { \use:nnn \token_to_str:N ##1 { } }
              { \use:nnn \token_to_str:c {new#1variant} { } }
          }
          { \use:c {declare#1variant} {##1} {##2} }
      }

    \exp_args:Nc \NewDocumentCommand {renew#1variant} { m m }
      {
        \tl_if_exist:NTF ##1
          { \use:c {declare#1variant} {##1} {##2} }
          {
            \msg_error:nnxx { engvar } { command-not-yet-defined }
              { \use:nnn \token_to_str:N ##1 { } }
              { \use:nnn \token_to_str:c {renew#1variant} { } }
          }
      }

    \exp_args:Nc \NewDocumentCommand {provide#1variant} { m m }
      {
        \tl_if_exist:NTF ##1
          {}
          { \use:c {declare#1variant} {##1} {##2} }
      }
  }

%================================================================================
% Defining languages

% use iflang package as expl3 conditional
% #1: language name
% #2: true code
\prg_new_conditional:Nnn \__engvar_check_langname:n { T }
  {
    \IfLanguageName{#1}
      { \prg_return_true: }
      { \prg_return_false: }
  }

% run through list of names for a language, checking for match
% #1: clist of language names
\cs_new:Nn \__engvar_check_langname_clist:n
  {
    \seq_set_from_clist:Nn \l_tmpa_seq {#1}
    \seq_map_inline:Nn \l_tmpa_seq
      {
        \__engvar_check_langname:nT {##1}
          {
            \bool_gset_true:N \g__engvar_lang_bool
            \seq_map_break:
          }
      }
  }
%--------------------------------------------------------------------------------

% process id & list of names of a language
% #1: language id
% #2: clist of language names
\cs_new:Nn \__engvar_run_lang_id_clist:nn
  {
    \exp_args:Nc \NewDocumentCommand {if#1} { m } { }
    % have we already chosen a language?
    \bool_if:NTF \g__engvar_lang_bool
      {}
      {
        \__engvar_check_langname_clist:n {#2}
        \__engvar_check_langname_match:n {#1}
      }
  }
\cs_generate_variant:Nn \__engvar_run_lang_id_clist:nn { VV }

% check for match & redefine lang conditional \if<id>
% #1: language id
\cs_new:Nn \__engvar_check_langname_match:n
  {
    \bool_if:NTF \g__engvar_lang_bool
      { \exp_args:Nc \RenewDocumentCommand {if#1} { m } { ##1 } }
      {}
  }

%--------------------------------------------------------------------------------

% create keys for \engvar_variant function
\keys_define:nn { engvar / deflangs }
  {
    unknown .code:n =
      { \__engvar_run_lang_id_clist:VV \l_keys_key_tl \l_keys_value_tl }
  }

% choose language, create \new???variant function
% #1: label
% #2: clist of language specs: id={clist of names},...
\cs_new:Nn \engvar_variant:nn
  {
    \keys_set:nn { engvar / deflangs } {#2}
    \__engvar_variant_creator:n {#1}
  }
%================================================================================
\bool_if:NTF \g__engvar_def_bool
  {
    % default language choices
    \engvar_variant:nn {eng} { UK={british, UKenglish}, US={american, USenglish} }
    %----------------------------------------------------------------------------
    \newengvariant{\Fall}{UK=Autumn, US=Fall}
  }
  {}
%================================================================================
\ExplSyntaxOff
%================================================================================
\endinput
