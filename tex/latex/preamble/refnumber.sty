%%  Get numbers from labels.
%%
%% Requires packages: expl3, xparse, hyperref
%%
%%
%% History: 2018/03/31 v1.0       get numbers from labels (SL)
%%          2019/09/10 v2.0       using expl3 (SL)
%--------------------------------------------------------------------------------
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{refnumber}[2019/9/10 v2.0 get numbers from labels (SL)]
%--------------------------------------------------------------------------------
\makeatletter
%--------------------------------------------------------------------------------

%\RequirePackage{refcount} % we're replacing this!
%\RequirePackage{interface3} % for docs
\RequirePackage{expl3}
\RequirePackage{xparse}
\RequirePackage{hyperref}
\RequirePackage{sltools}

%--------------------------------------------------------------------------------
\ExplSyntaxOn
%================================================================================


% Get hyperdest info from hyperref label as a sequence
% #1: seq-variable to store result
% #2: tok_list containing label
%
\cs_new:Nn \__refnum_get_seq:Nn
{
  \group_begin:
    \tl_set:Nx \l_tmpa_tl { \tl_item:cn {r@#2} {4} }
    \seq_set_split:NnV \l_tmpa_seq {.} \l_tmpa_tl
    \sltools_seq_uset:NN #1 \l_tmpa_seq
  \group_end:
}

%--------------------------------------------------------------------------------

% Get counter name from hyperref label
% #1: tok_list-variable to store result
% #2: tok_list containing label
%
\cs_new:Nn \__refnum_get_name:Nn
{
  \group_begin:
    \__refnum_get_seq:Nn \l_tmpb_seq {#2}
    \sltools_tl_uset:Nx #1 {\seq_item:Nn \l_tmpb_seq {1}}
  \group_end:
}


% Get counter value from hyperref label
% #1: tok_list-variable to store result
% #2: How many generations up? int
% #3: tok_list containing label
%
\cs_new:Nn \__refnum_get_counter:Nnn
{
  \group_begin:
    \__refnum_get_seq:Nn \l_tmpb_seq {#3}
    \sltools_tl_uset:Nx #1 {\seq_item:Nn \l_tmpb_seq {-1 - #2}}
  \group_end:
}

%--------------------------------------------------------------------------------

% Set counter value from hyperref label
% #1: target counter, tok_list
% #2: How many generations up? int
% #3: tok_list containing label
%
\cs_new:Nn \__refnum_to_counter:nnn
{
  \cs_if_exist:cTF{r@#3}
    {
      \group_begin:
        \__refnum_get_counter:Nnn \l_tmpb_tl {#2} {#3}
        \setcounter {#1} { \l_tmpb_tl }
      \group_end:
    }
    {} %no such label
}
% Set counter value from hyperref label
% #1: target counter name, tok_list-variable
% #2: How many generations up? int
% #3: tok_list containing label
%
\cs_generate_variant:Nn \__refnum_to_counter:nnn { Vnn }


% Set counter value from hyperref label
% #1: tok_list-variable to store result
% #2: counter to display as, tok_list
% #3: How many generations up? int
% #4: tok_list containing label
%
\cs_new:Nn \__refnum_as_counter:Nnnn
{
  \cs_if_exist:cTF{r@#4}
    {
      \group_begin:
        \tl_new:N \l__refnum_asc_tl
        \tl_set:Nx \l__refnum_asc_tl { \value{#2} }
        \__refnum_to_counter:nnn {#2} {#3} {#4}
        \sltools_tl_uset:Nx #1 { \use:c { the#2 } }
        \setcounter {#2} { \l__refnum_asc_tl }
      \group_end:
    }
    { \tl_clear_new:N #1 }  %no such label
}
% Set counter value from hyperref label
% #1: tok_list-variable to store result
% #2: counter to display as, tok_list-variable
% #3: How many generations up? int
% #4: tok_list containing label
%
\cs_generate_variant:Nn \__refnum_as_counter:Nnnn { NV }
%--------------------------------------------------------------------------------
% Get name from number if it has not been given
% #1: tok_list-variable to store result
% #2: counter name or -NoValue-, tok_list
% #3: tok_list containing label
\cs_new:Nn \__refnum_default_counter:Nnn
  {
    \group_begin:
      \IfNoValueTF{#2}
        { \__refnum_get_name:Nn \l_tmpb_tl {#3} }
        { \tl_set:Nn \l_tmpb_tl {#2} }
      \sltools_tl_uset:NV #1 \l_tmpb_tl
    \group_end:
  }

% Wrap counter display in a hyperlink
% #1: tok_list-variable to store result
% #2: counter display, tok_list
% #3: tok_list containing label
% #4: Suppress hyperlink? bool
%
\cs_new:Nn \__refnum_hyper_wrap:Nnnn
  {
    \IfBooleanF {#4}
      {
        \tl_if_empty:nF {#2}
          { \sltools_tl_func_args:Nnn #1 { \hyperref[#3] } {#2} }
      }
  }
\cs_generate_variant:Nn \__refnum_hyper_wrap:Nnnn { NVnn }
%--------------------------------------------------------------------------------

% Print or assign resultt of one of the above
% #1: temporary macro holding result - cleared at end, tok_list-variable
% #2: macro (to store result) or -NoValue- (to print out)
% #3: global assignment? bool
%
\cs_new:Nn \__refnum_output:Nnn
{
  \IfNoValueTF{#2}%        Have we been given a macro to assign to?
    { \use:n #1 }%           No. Print out.
    {
      \IfBooleanTF {#3}
        { \tl_gset_eq:NN #2 #1 }
        { \tl_set_eq:NN #2 #1 }
    }% Yes. Assign.
  \tl_clear:N #1%          Clear out temporary output storage.
}

%================================================================================
%For use only in code of Document commands, not as inputs
\tl_new:N \l__refnum_tmpa_tl
\tl_new:N \l__refnum_tmpb_tl

% get counter name
% #1 Exclaimed: Assign globally?
% #2: Mandatory argument: label to ref.
% #3: Last optional argument assigned to.
%
\NewDocumentCommand \refcountname { t! m o }
{
  \__refnum_get_name:Nn \l__refnum_tmpa_tl {#2}
  \__refnum_output:Nnn \l__refnum_tmpa_tl {#3} {#1}
}

% get counter / parent counter value as string
% #1 Exclaimed: Assign globally?
% #2 Optional: How many generations up parent counters do we go?
% #3 Mandatory: label to ref.
% #4 Optional: assigned to.
%
\NewDocumentCommand \refnum { t! O{0} m o }
{
  \__refnum_get_counter:Nnn \l__refnum_tmpa_tl {#2} {#3}
  \__refnum_output:Nnn \l__refnum_tmpa_tl {#4} {#1}
}

% assign ref counter to other counter
% #1 Optional: How many generations up parent counters do we go?
% #2 Optional: Counter type to change
% #3 Mandatory: label to ref.
%
\NewDocumentCommand \reftocounter { O{0} d<> m }
{
  % If we haven't been given a counter name, get it from ref
  \__refnum_default_counter:Nnn \l__refnum_tmpa_tl {#2} {#3}
  \__refnum_to_counter:Vnn \l__refnum_tmpa_tl {#1} {#3}
}

% temporarily assign ref counter to other counter & display
% #1 Starred: Suppress hyperlink?
% #2 Exclaimed: Assign globally?
% #3 Optional: How many generations up parent counters do we go?
% #4 Optional: Counter type to display as
% #5 Mandatory: label to ref.
% #6 Optional: assigned to.
%
\NewDocumentCommand \asref { s t! O{0} d<> m o }
{
  % If we haven't been given a counter name, get it from ref
  \__refnum_default_counter:Nnn \l__refnum_tmpa_tl {#4} {#5}
  \__refnum_as_counter:NVnn \l__refnum_tmpb_tl \l__refnum_tmpa_tl {#3} {#5}
  \__refnum_hyper_wrap:NVnn \l__refnum_tmpb_tl \l__refnum_tmpb_tl {#5} {#1}
  \__refnum_output:Nnn \l__refnum_tmpb_tl {#6} {#2}
}

%================================================================================
\ExplSyntaxOff
%--------------------------------------------------------------------------------
\makeatother
\endinput
%--------------------------------------------------------------------------------

The package \texttt{refcount} fails if the counter is displayed with anything
other than \arabic, or if it has any prefix, and any suffix will be output.
This package gets around that, but it relies on \texttt{hyperref} instead.
It will load \texttt{hyperref} if it has not been loaded earlier.
It would be better to load \texttt{hyperref} yourself, before \texttt{refnumber},
so that you can choose your options.

The basic commands are:

\refcountname(!){(label)}[(def-to)]             The ref counter type.
\refnum(!)[(level)]{(label)}[(def-to)]          The ref counter number as a string.
\asref(*!)[(level)]<(type)>{(label)}[(def-to)]  The ref counter as displayed by \the(type).
\reftocounter[(level)]<(type)>{(label)}         Assign ref counter to (type) counter.

(label)  The label we are referencing.
(level)  How many generations up parent counters do we go?
         Default: 0.
(type)   Type of counter to display it as/assign to?
         Default: \refcountname{(label)}.
(def-to) The result will be stored in this macro.
         The result is printed if this is omitted.

[] and <> both denote optional arguments.
The different delimiters allow the command to determine which one has been omitted.
The starred version of \asref suppresses the hyperlink.
The exclaimed versions perform global assignments, by default assignments are local.

Let's look at an example.
Say we have a hierarchy of counters:

\newcounter{greatgrandparent}
\newcounter{grandparent}[greatgrandparent]
\newcounter{parent}[grandparent]
\newcounter{child}[parent]

Suppose the counter formats are:

\renewcommand{\thegreatgrandparent}{\arabic{greatgrandparent}}
\renewcommand{\thegrandparent}{\Alph{grandparent}}
\renewcommand{\theparent}{\Roman{parent}}
\renewcommand{\thechild}{\theparent.\alph{child})}

They have prefixes when referenced.

\renewcommand{\p@grandparent}{\thegreatgrandparent.}
\renewcommand{\p@parent}{\p@grandparent.\thegrandparent.}
\renewcommand{\p@child}{\p@parent.\theparent.}

Let's advance these counters and use the last one for a label.

\stepcounter{greatgrandparent}
\stepcounter{grandparent}\stepcounter{grandparent}
\stepcounter{parent}\stepcounter{parent}\stepcounter{parent}
\stepcounter{child}\stepcounter{child}\stepcounter{child}\refstepcounter{child}
\label{ch:now}

Now \ref{ch:now} will produce 1.B.III.d).
The newlabel entry will be \newlabel{ch:now}{{1.B.III.d)}{1}{}{child.1.2.3.4}{}}.
To pick out individual parts:

\begin{tabular}{llll}
  \refcountname{ch:now} & child \\
  \refnum{ch:now}    & 4 & \asref{ch:now}    & d)  \\
  \refnum[1]{ch:now} & 3 & \asref[1]{ch:now} & c) \\
  \refnum[2]{ch:now} & 2 & \asref[2]{ch:now} & b) \\
  \refnum[3]{ch:now} & 1 & \asref[3]{ch:now} & a) \\
\end{tabular}

They can also be used to assign to a macro/counter with the optional final/second
argument, \textit{\`a la} \texttt{xstring}:

\begin{tabular}{ll}
  \refcountname{ch:now}[\macro]     & \macro = child     \\
  \asref[1]{ch:now}[\macro]         & \macro = c         \\
  \asref[1]<parent>{ch:now}[\macro] & \macro = III       \\
  \reftocounter[1]{ch:now}          & \value{child}  = 3 \\
  \reftocounter[1]<parent>{ch:now}  & \value{parent} = 3 \\
  \reftocounter<parent>{ch:now}     & \value{parent} = 4 \\
\end{tabular}
