% -*- TeX -*- -*- STY -*- -*- LaTeX-Expl3 -*-
%%  This defines custom derivative notation.
%%
%% Requires packages: expl3, xparse
%%
%% e.g.
%%    \begin{equation}
%%      \diff[2]{u}{v} = \pdiffm{f}{x;y;z} \pdiff{w}{k}.
%%    \end{equation}
%%
%% Derivatives defined:
%%    \diff[n]{y}{x}
%%    \pdiff[n]{y}{x}
%%    \pdiff{w}{x;y;z}
%%    \pdiff{w}{x;y,2;z,c}
%%    \pdiffc<y>{z}{x}
%%    \fdf{S}{q(t)}
%%    \fdf{S}{q(t);p(t')}
%%    \pdl[\mu]
%%    \pdr[\mu]
%%    \pdlr[\mu]
%%    \bp[\mu]
%%    \pdg[\mu]
%%    \intd[_0^\infty]{t} f(t) or \intd[_0^\infty]<f(t)>{t}
%%    \integ[_0^\infty]<f(x)>{x} (uses placeholder if <> omitted)
%%
%% History: 2018/03/17 v1.0      copied & updated defns from sl_definitions.tex
%%          2019/09/10 v2.0      using expl3
%%          2021/06/17 v2.0      using expl3 packaging
%================================================================================
\RequirePackage{expl3}
\ProvidesExplPackage {sl-derivs} {2019/09/10} {v2.0} {derivative notation}
%--------------------------------------------------------------------------------
%\RequirePackage{interface3}
\RequirePackage{xparse}
\RequirePackage{sltools}
\RequirePackage{l3keys2e}
\ExplSyntaxOn
%================================================================================
\tl_new:N \l__slderivs_numer_tl
\tl_new:N \l__slderivs_denom_tl
\int_new:N \l__slderivs_order_int
% separator for denominator entries in output:
\tl_new:N \g_slderivs_sep_tl
\tl_new:N \g_slderivs_placeholder_tl
%--------------------------------------------------------------------------------
\msg_new:nnnn { slderivs } { unknown-option }
  { Unknown~option~'#2'! }
  { Known~options:~'#1'. }
%--------------------------------------------------------------------------------
% Package options
\keys_define:nn { slderivs }
  {
    separator .tl_gset:N = \g_slderivs_sep_tl,
    separator .value_required:n = true,
    separator .initial:n = {  },
    placeholder .tl_gset:N = \g_slderivs_placeholder_tl,
    placeholder .value_required:n = true,
    placeholder .initial:n = { \cdots },
    unknown .code:n =
      {
        \msg_warning:nnxx { slderivs } { unknown-option }
          { separator, placeholder } { \exp_not:n {#1} }
          % Valid options, Invalid option given
      },
  }
\ProcessKeysPackageOptions { slderivs }
%================================================================================
% Append string to order of derivative
% #1: derivative order tok_list-variable to append to
% #2: to be added to order, tok_list variable
%
\cs_new_protected:Nn \__slderivs_append_to_order:NN
{
  \tl_if_blank:VF #1 { \tl_put_right:Nn #1 {+} }
  \tl_put_right:NV #1 #2
}

% Add number to order of derivative
% #1: derivative order tok_list-variable to append to
% #2: to be added to order, int variable
%
\cs_new_protected:Nn \__slderivs_add_to_order:NN
{
  \bool_if:nT { (! \tl_if_blank_p:V #1 ) || \int_compare_p:nNn {#2} > { 1 } }
    { \__slderivs_append_to_order:NN #1 #2 }
}

%--------------------------------------------------------------------------------
%Raise indep var in denominator to exponent
% #1: tok_list-variable ending with independent variable name
% #2: exponent, tok_list
%
\cs_new_protected:Nn \__slderivs_raise:Nn
{
    \tl_if_blank:nF {#2}
      {
        \tl_if_eq:nnF {#2} { 1 }
          { \tl_put_right:Nn #1 { ^{#2} } }
      }
}
%Raise indep var in denominator to exponent
% #1: tok_list-variable ending with independent variable name
% #2: exponent, tok_list variable
%
\cs_generate_variant:Nn \__slderivs_raise:Nn { NV }

%--------------------------------------------------------------------------------
\tl_new:N \l__slderivs_one_denom_tl
\tl_new:N \l__slderivs_one_order_tl
\int_new:N \l__slderivs_one_order_int
% Process one entry in the denominator
% #1: denominator tok_list-variable to append to
% #2: stores order of derivative as actual numbers, int-variable
% #3: stores order of derivative as variable names, tok_list-variable
% #4: differential operator, e.g. `d', tok_list-variable
% #5: one entry for denominator, tok_list=varname or clist={varname, order}
%
\cs_new_protected:Nn \__slderivs_one_indep:NNNNn
{
  \group_begin:
    \seq_set_from_clist:Nn \l_tmpb_seq {#5}
%    \seq_set_split:Nnn \l_tmpb_seq {;} {#5}
%
    \tl_set_eq:NN \l__slderivs_one_denom_tl #1
    \int_set_eq:NN \l_tmpa_int #2
    \tl_set_eq:NN \l__slderivs_one_order_tl #3
%
    \tl_if_eq:nnTF {...} {#5}
      {
        \tl_put_right:Nn \l__slderivs_one_denom_tl
          { \g_slderivs_placeholder_tl \g_slderivs_sep_tl }
      }
      {
        \tl_put_right:NV \l__slderivs_one_denom_tl #4
    %
        \int_compare:nNnTF { \seq_count:N \l_tmpb_seq } = {1}
          {
            \int_incr:N \l_tmpa_int
            \tl_put_right:Nn \l__slderivs_one_denom_tl {#5}
          }
          {
            \seq_pop_left:NN \l_tmpb_seq \l_tmpa_tl
            \tl_put_right:NV \l__slderivs_one_denom_tl \l_tmpa_tl
            \seq_pop_left:NN \l_tmpb_seq \l_tmpa_tl
    %
            \sltools_tl_if_num:VTF \l_tmpa_tl
              {
                \__slderivs_raise:NV \l__slderivs_one_denom_tl \l_tmpa_tl
                \tl_put_right:NV \l__slderivs_one_denom_tl \g_slderivs_sep_tl
                \int_add:Nn \l_tmpa_int { \l_tmpa_tl }
              }
              {
                \__slderivs_raise:NV \l__slderivs_one_denom_tl \l_tmpa_tl
                \__slderivs_append_to_order:NN \l__slderivs_one_order_tl \l_tmpa_tl
                \tl_put_right:NV \l__slderivs_one_denom_tl \g_slderivs_sep_tl
              }
          }
      }
    \sltools_tl_uset:NV #1 \l__slderivs_one_denom_tl
    \sltools_int_uset:NV #2 \l_tmpa_int
    \sltools_tl_uset:NV #3 \l__slderivs_one_order_tl
  \group_end:
}

\tl_new:N \l__slderivs_proc_op_tl
% Process semicolon-separated list of indep variables in denominator
% #1: denominator tok_list-variable to append to
% #2: stores order of derivative as a string, tok_list-variable
% #3: semicolon-separated list of entries for denominator,
%       each tok_list=varname or clist={varname, order}
% #4: differential operator, e.g. `d', tl
%
\cs_new_protected:Nn \__slderivs_process_denom:NNnn
{
  \group_begin:
    \tl_clear:N \l_tmpa_tl
    \tl_clear:N \l_tmpb_tl
    \int_zero:N \l_tmpb_int
%    \seq_set_from_clist:Nn \l_tmpa_seq {#3}
    \seq_set_split:Nnn \l_tmpa_seq {;} {#3}
%
    \tl_set:Nn \l__slderivs_proc_op_tl {#4}
    \seq_map_inline:Nn \l_tmpa_seq
      {
        \__slderivs_one_indep:NNNNn \l_tmpa_tl \l_tmpb_int \l_tmpb_tl
          \l__slderivs_proc_op_tl {##1}
      }
    \__slderivs_add_to_order:NN \l_tmpb_tl \l_tmpb_int
%
    \sltools_tl_uset:NV #1 \l_tmpa_tl
    \sltools_tl_uset:NV #2 \l_tmpb_tl
  \group_end:
}

\tl_new:N \l__slderivs_proc_numer_tl
% Process dependent variable in numerator
% #1: numerator tok_list-variable to write to
% #2: numerator function, tok_list
% #3: order of derivative as a string, tok_list
% #4: differential operator, e.g. `d', tok_list
%
\cs_new_protected:Nn \__slderivs_process_numer:NnNn
{
  \group_begin:
    \tl_put_right:Nn \l__slderivs_proc_numer_tl {#4}
    \__slderivs_raise:NV \l__slderivs_proc_numer_tl #3
    \tl_put_right:Nn \l__slderivs_proc_numer_tl {#2}
%
    \sltools_tl_uset:NV #1 \l__slderivs_proc_numer_tl
  \group_end:
}

%--------------------------------------------------------------------------------
% Make the derivative symbols
% #1: numerator, tok_list
% #2: denominator(s)-  semicolon-separated list of entries for denominator,
%       each tok_list=varname or clist={varname, order}
% #3: differential operator, e.g. `d', tok_list
%
\cs_new_protected:Nn \__slderivs_make_deriv:nnn
{
  \group_begin:
%
    \__slderivs_process_denom:NNnn \l__slderivs_denom_tl \l_tmpb_tl
      {#2} {{#3}}
    \__slderivs_process_numer:NnNn \l__slderivs_numer_tl
      {{#1}} \l_tmpb_tl  {{#3}}
%
    \exp_args:NVV
      \frac \l__slderivs_numer_tl \l__slderivs_denom_tl
%
  \group_end:
}

% Make the derivative symbols, overriding the numerator order
% #1: numerator, tok_list
% #2: denominator(s)-  semicolon-separated list of entries for denominator,
%       each tok_list=varname or clist={varname, order}
% #3: differential operator, e.g. `d', tok_list
% #4: order of derivative (numerator only), tok_list
\cs_new_protected:Nn \__slderivs_make_deriv:nnnn
{
  \group_begin:
%
    \__slderivs_process_denom:NNnn \l__slderivs_denom_tl \l_tmpb_tl
      {#2} {{#3}}
    \tl_set:Nn \l_tmpb_tl {#4}
    \__slderivs_process_numer:NnNn \l__slderivs_numer_tl
      {{#1}} \l_tmpb_tl {{#3}}
%
    \exp_args:NVV
      \frac \l__slderivs_numer_tl \l__slderivs_denom_tl
%
  \group_end:
}
%================================================================================
% Define command for univariate derivative
% #1: command to define
% #2: differential operator, e.g. `d'
%
\NewDocumentCommand \NewDerivUni { m m } {
  \NewDocumentCommand #1 { o m m } {
    \IfNoValueTF {##1}
      { \__slderivs_make_deriv:nnn  {##2} {##3} {#2} }
      { \__slderivs_make_deriv:nnnn {##2} {##3,##1} {#2} {##1} }
  }
}

% Define command for multivariate derivative
% #1: command to define
% #2: differential operator, e.g. `\partial'
%
\NewDocumentCommand \NewDerivMulti { m m } {
  \NewDocumentCommand #1 { o m m } {
    \IfNoValueTF {##1}
      { \__slderivs_make_deriv:nnn  {##2} {##3} {#2} }
      { \__slderivs_make_deriv:nnnn {##2} {##3} {#2} {##1} }
  }
}

% Define command for inline derivative
% #1: command to define
% #2: differential operator, e.g. `\partial'
%
\NewDocumentCommand \NewDerivInline { m m } {
  \NewDocumentCommand #1 { o } {
    \IfNoValueTF {##1}
      { #2 }
      { {#2}_{##1} }
  }
}
%================================================================================
\NewDocumentCommand \SetDerivSeparator { m }
  { \tl_gset:Nn \g_slderivs_sep_tl {#1} }
\NewDocumentCommand \SetDerivPlaceholder { m }
  { \tl_gset:Nn \g_slderivs_placeholder_tl {#1} }
%
\NewDocumentCommand \intd { s o d<> m } {
  \int
  \IfNoValueTF {#2}
    {}
    { \IfBooleanT {#1} {\limits}#2 \!\! }
  \!
  \IfNoValueTF {#4}
    { \mathrm{d}#3 \, \mathopen{} }
    { \mathopen{} #3 \, \mathclose{} \mathrm{d}#4 }
}
\NewDocumentCommand \integ { s o d<> m } {
  \int
  \IfNoValueTF {#2}
    {}
    { \IfBooleanT {#1} {\limits}#2 \!\! }
  \IfNoValueTF {#3}
    { \g_slderivs_placeholder_tl \; }
    { \! \mathopen{} #3 \, \mathclose{} }
  \mathrm{d}#4
}
%================================================================================
\ExplSyntaxOff
%================================================================================
% Derivatives, etc. First argument is optional.
% ordinary derivative
\NewDerivUni \diff { \mathrm{d} }
% partial derivatives (higher order/constant independent variables)
\NewDerivMulti \pdiff { \partial }
\NewDocumentCommand \pdiffc { d<> o m m } {
  \IfNoValueTF {#1}
    { \left(\pdiff[#2]{#3}{#4}\right) }
    { \left(\pdiff[#2]{#3}{#4}\right)_{\!\!#1} }
}
% functional derivative
\NewDerivMulti \fdf { \delta }

%backwards compatibility
\NewDerivMulti \pdiffm { \partial }
\NewDerivMulti \fdfm { \delta }
%
\NewDerivInline \pdlr { \overleftrightarrow{\partial} }
\NewDerivInline \pdl { \overleftarrow{\partial} }
\NewDerivInline \pdr { \overrightarrow{\partial} }
\NewDerivInline \bpd { \bar{\partial} }
\NewDerivInline \pdg { \partial^\dag }
%
%
\NewDocumentCommand \dt {} {\mathrm{d}t}
\NewDocumentCommand \dx {} {\mathrm{d}x}
\NewDocumentCommand \dy {} {\mathrm{d}y}
\NewDocumentCommand \dz {} {\mathrm{d}z}
\NewDocumentCommand \dzb {} {\mathrm{d}\bar{z}}
%
%================================================================================
\endinput
